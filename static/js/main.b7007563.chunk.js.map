{"version":3,"sources":["components/subHeader/subHeader.js","components/Header/header.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["subHeader","props","react_default","a","createElement","className","id","concat","semester","options","value","label","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","selectedOption","setState","window","location","href","origin","state","react_select_esm","isClearable","onChange","React","Component","App","components_Header","components_subHeader_subHeader","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAaeA,SAVG,SAAAC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBC,GAAE,WAAAC,OAAaN,EAAMO,WACxDN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,YAAqCJ,EAAMO,UAC3CN,EAAAC,EAAAC,cAAA,8BCJAK,EAAU,CACd,CAAEC,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,cAC7B,CAAED,MAAO,YAAaC,MAAO,eCXhBC,cDeb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KAMRmB,aAAe,SAAAC,GACbR,EAAKS,SAAS,CAAED,kBAAkB,WAE9BE,OAAOC,SAASC,KADdJ,EACF,GAAAd,OAA0BgB,OAAOC,SAASE,OAA1C,MAAAnB,OACEc,EAAeX,OAGjB,GAAAH,OAA0BgB,OAAOC,SAASE,WAZ9Cb,EAAKc,MAAQ,CACXN,eAAgB,MAHDR,wEAoBjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,gCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEvB,UAAU,WACVwB,aAAa,EACbnB,MAAOM,KAAKW,MAAMN,eAClBS,SAAUd,KAAKI,aACfX,QAASA,aA/BAsB,IAAMC,WEQZC,0LAhBX,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,IACrBN,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,SAAU,YAZXwB,cCOEI,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7007563.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./subHeader.css\";\r\n\r\nconst subHeader = props => {\r\n  return (\r\n    <div className=\"subheader-container\" id={`semester${props.semester}`}>\r\n      <hr />\r\n      <div className=\"subheader\">Semester {props.semester}</div>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default subHeader;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nimport Select from \"react-select\";\r\n\r\nconst options = [\r\n  { value: \"semester1\", label: \"Semester 1\" },\r\n  { value: \"semester2\", label: \"Semester 2\" },\r\n  { value: \"semester3\", label: \"Semester 3\" },\r\n  { value: \"semester4\", label: \"Semester 4\" },\r\n  { value: \"semester5\", label: \"Semester 5\" },\r\n  { value: \"semester6\", label: \"Semester 6\" },\r\n  { value: \"semester7\", label: \"Semester 7\" },\r\n  { value: \"semester8\", label: \"Semester 8\" }\r\n];\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedOption: null\r\n    };\r\n  }\r\n\r\n  handleChange = selectedOption => {\r\n    this.setState({ selectedOption }, () => {\r\n      if (selectedOption) {\r\n        window.location.href = `${window.location.origin}/#${\r\n          selectedOption.value\r\n        }`;\r\n      } else {\r\n        window.location.href = `${window.location.origin}`;\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"header-container\">\r\n        <div className=\"header-title\">Stranger Beings (DA Edition)</div>\r\n        <div className=\"header-navigation-dropdown\">\r\n          <span>Go To: </span>\r\n          <Select\r\n            className=\"dropdown\"\r\n            isClearable={true}\r\n            value={this.state.selectedOption}\r\n            onChange={this.handleChange}\r\n            options={options}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import Header from \"./header\";\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport SubHeader from \"./components/subHeader/subHeader\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SubHeader semester={1} />\n        <SubHeader semester={2} />\n        <SubHeader semester={3} />\n        <SubHeader semester={4} />\n        <SubHeader semester={5} />\n        <SubHeader semester={6} />\n        <SubHeader semester={7} />\n        <SubHeader semester={8} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}